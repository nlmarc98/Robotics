package nl.ru.ai.MMJV;

import lejos.hardware.motor.Motor;
import lejos.robotics.subsumption.Behavior;

public class KillOrMateBehavior implements Behavior {

	private boolean suppressed = false;
	static final int SPEED = 200;
	static final int KILLSPEED = 300;
	static final int ROTATE = 90;
	private MusicRed red;
	private MusicBlue blue;

	public Filter sample;

	public KillOrMateBehavior(Filter s) throws Exception {
		this.sample = s;
	}

	public boolean takeControl() {
		return (sample.distanceValue() < 0.07);
	}

	public void suppress() {
		suppressed = true;
	}

	public void action() {
		Motor.B.stop();
		Motor.C.stop();

		suppressed = false;
		while (!suppressed) {
			{
				if (sample.redValue() > 0.01 && sample.redValue() < 0.04) {
					System.out.println("Found blue pillar");
					// System.out.println(sample.redValue());
					blue.play();
					try {
						Motor.B.setSpeed(SPEED);
						Motor.C.setSpeed(SPEED);
						Motor.B.backward();
						Motor.C.backward();
						Thread.sleep(1500);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					Motor.A.stop();
					Motor.C.stop();
				} else if (sample.redValue() > 0.20 && sample.redValue() < 0.33) {
					System.out.println("Found red pillar");
					// System.out.println(sample.redValue());
					Motor.B.setSpeed(SPEED);
					Motor.C.setSpeed(SPEED);
					Motor.B.backward();
					Motor.C.backward();
					Motor.B.stop();
					Motor.C.stop();
					red.play();
					try {
						Motor.B.setSpeed(KILLSPEED);
						Motor.C.setSpeed(KILLSPEED);
						Motor.B.forward();
						Motor.C.forward();
						Thread.sleep(2000);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
			Thread.yield();
		}
		Motor.B.stop(); // clean up
		Motor.C.stop();
	}
}
