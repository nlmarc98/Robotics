package nl.ru.ai.MMJV;

import lejos.hardware.motor.Motor;
import lejos.robotics.subsumption.Behavior;
import lejos.utility.Delay;

public class FollowPath implements Behavior {
	static final double WHITE = 0.35;
	static final double BLACK = 0.1;
	static final int SPEED = 200;
	static final int CORNER_TIME = 30;
	private boolean suppressed = false;
	private Filter sample;

	public FollowPath(Filter s) {
		this.sample = s;
	}

	@Override
	public boolean takeControl() {
		return true;
	}

	@Override
	public void action() {
		suppressed = false;
		double colorValue;
		double diff = WHITE - BLACK;
		double invDiff = 1 / diff;
		double BSpeed;
		double CSpeed;
		int counter = 0;
		while (!suppressed) {
			colorValue = sample.redValue();
			if (colorValue < 0.15) {
			counter++;
		} else {
			counter = 0;
		}
		if (counter >=CORNER_TIME){
			Motor.B.setSpeed((int)(SPEED * 1.5));
			Motor.C.setSpeed((int)(SPEED * 0.5));
			Motor.B.forward();
			Motor.C.backward();
		}
		else{
			BSpeed=-(invDiff) * colorValue + (1 + 0.1 * invDiff);
			CSpeed= (invDiff) * colorValue - (0.1 * invDiff);
			Motor.B.setSpeed((int)(SPEED * BSpeed));
			Motor.B.forward();
			Motor.C.setSpeed((int)(SPEED * CSpeed));
			Motor.C.forward();
		}
		Delay.msDelay(10);
		Thread.yield();
	}
	Motor.B.stop();
	Motor.C.stop();
	}

	@Override
	public void suppress() {
		suppressed = true;

	}

}
